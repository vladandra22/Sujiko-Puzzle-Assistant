<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
Checkstyle configuration for coding standard used in 2IPC0 Programming Methods.
version 1.0.0 @ 2022-11-13
-->

<module name="Checker">
    <!--
        The files in the gui package are (partially) auto-generated, and don't adhere to our coding
        standard. Therefore, we skip all checks.
     -->
    <module name="SuppressionSingleFilter">
        <property name="files" value="gui[\\/]"/>
    </module>

    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>
    <property name="fileExtensions" value="java"/>

    <!-- Rule 2. -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Rule 3. -->
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="100"/>
        <property name="ignorePattern" value="(^(package|import) .*)|(^.*(https|http)://.*)"/>
    </module>

    <module name="TreeWalker">
        <!-- Rule 2. -->
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="4"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="2"/>
        </module>

        <!-- Rule 4. -->

        <!-- Rule 5. -->
        <module name="EmptyLineSeparator">
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, STATIC_INIT, INSTANCE_INIT,
                METHOD_DEF, RECORD_DEF"/>
        </module>

        <!-- Rule 6. -->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE,
                LITERAL_RETURN, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_FINALLY, DO_WHILE,
                ELLIPSIS, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_CATCH, LAMBDA,
                LITERAL_YIELD, LITERAL_CASE"/>
        </module>

        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, LABELED_STAT,
                METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <!-- Rule 7. -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="ignoreEnhancedForColon" value="true"/>
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR,
                BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT,
                LAMBDA, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,
                LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,
                NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN,
                STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"/>
        </module>

        <!-- Rule 8. -->
        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF,
                LITERAL_WHILE"/>
        </module>

        <module name="LeftCurly">
            <property name="tokens" value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF,
                ENUM_DEF, INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,
                LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH,
                LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF, OBJBLOCK, STATIC_INIT,
                RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>

        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF,
                LITERAL_ELSE, LITERAL_DO"/>
        </module>

        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR,
                LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF,
                RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>

        <!-- Rule 9. -->

        <!-- Rule 10. -->

        <module name="JavadocStyle"/>
        <module name="InvalidJavadocPosition"/>
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <module name="JavadocMethod">
            <property name="accessModifiers" value="public, protected"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF,
                COMPACT_CTOR_DEF"/>
        </module>

        <module name="MissingJavadocMethod">
            <property name="scope" value="package"/>
            <property name="minLineCount" value="1"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="ignoreMethodNamesRegex" value="^main|run|setupUi$"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF,
                COMPACT_CTOR_DEF"/>
        </module>

        <module name="MissingJavadocType">
            <property name="scope" value="protected"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, RECORD_DEF,
                ANNOTATION_DEF"/>
            <property name="excludeScope" value="nothing"/>
        </module>

        <!-- Various other checks not specifically mentioned in the coding standard -->
        <module name="OuterTypeFilename"/>

        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
        </module>

        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <module name="AvoidStarImport">
            <property name="excludes" value="java.util, java.awt, java.awt.event, javax.swing,
                org.junit.jupiter.api.Assertions"/>
        </module>

        <module name="AvoidStaticImport">
            <property name="excludes" value="org.junit.jupiter.api.Assertions.*"/>
        </module>

        <module name="NoLineWrap">
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT"/>
        </module>

        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                LITERAL_SWITCH"/>
        </module>

        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>

        <module name="SuppressionXpathSingleFilter">
            <!-- suppression required till https://github.com/checkstyle/checkstyle/issues/7541 -->
            <property name="id" value="RightCurlyAlone"/>
            <property name="query" value="//RCURLY[parent::SLIST[count(./*)=1]
                or preceding-sibling::*[last()][self::LCURLY]]"/>
        </module>

        <module name="OneStatementPerLine"/>

        <module name="MultipleVariableDeclarations"/>

        <module name="ArrayTypeStyle"/>

        <module name="MissingSwitchDefault"/>

        <module name="FallThrough"/>

        <module name="UpperEll"/>

        <module name="ModifierOrder"/>

        <module name="EmptyLineSeparator">
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF,
                INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF,
                VARIABLE_DEF, RECORD_DEF, COMPACT_CTOR_DEF"/>
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>

        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>

        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>

        <module name="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/259 -->
            <property name="id" value="SeparatorWrapEllipsis"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="option" value="EOL"/>
        </module>

        <module name="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/258 -->
            <property name="id" value="SeparatorWrapArrayDeclarator"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="option" value="EOL"/>
        </module>

        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>

        <module name="TypeName">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF,
                RECORD_DEF"/>
        </module>

        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9_]*$"/>
        </module>

        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$|^(x|y|r)$"/>
        </module>

        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$|^(x|y|r|(dx)|(dy)|n|m|a)$"/>
        </module>

        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
        </module>

        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$|^e$"/>
        </module>

        <module name="LocalVariableName">
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$|^(x|y|r|(dx)|(dy)|n|m)$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
        </module>

        <module name="RecordComponentName">
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$|^(x|y|r|(dx)|(dy)|n|m)$"/>
        </module>

        <module name="NoFinalizer"/>

        <module name="GenericWhitespace"/>

        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="3"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF,
                ANNOTATION_FIELD_DEF, PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF, PATTERN_VARIABLE_DEF,
                RECORD_DEF, RECORD_COMPONENT_DEF"/>
        </module>

        <module name="NoWhitespaceBeforeCaseDefaultColon"/>

        <module name="OverloadMethodsDeclarationOrder"/>

        <module name="MethodParamPad">
            <property name="tokens" value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF,
                SUPER_CTOR_CALL, ENUM_CONSTANT_DEF, RECORD_DEF"/>
        </module>

        <module name="ParenPad">
            <property name="tokens" value="ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF,
                DOT, ENUM_CONSTANT_DEF, EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF,
                LITERAL_NEW, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL,
                METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA, RECORD_DEF"/>
        </module>

        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE,
                LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR,
                METHOD_REF, TYPE_EXTENSION_AND"/>
        </module>

        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF,
                RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>

        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>

        <module name="NonEmptyAtclauseDescription"/>

        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF,
                VARIABLE_DEF"/>
        </module>

        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
        </module>

        <module name="SingleLineJavadoc"/>

        <module name="CommentsIndentation">
            <property name="tokens" value="SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="SimplifyBooleanExpression"/>

        <module name="SimplifyBooleanReturn"/>

        <module name="VariableDeclarationUsageDistance">
            <property name="allowedDistance" value="10"/>
        </module>


        <!-- ==================== -->
        <!-- Code quality metrics -->
        <!-- ==================== -->

        <!-- Coupling between classes -->
        <module name="ClassDataAbstractionCoupling">
            <property name="max" value="7"/>  <!-- = default -->
        </module>
        <module name="ClassFanOutComplexity">
            <property name="max" value="20"/>  <!-- = default -->
        </module>

        <!-- Method complexity -->
        <module name="CyclomaticComplexity">
            <property name="max" value="10"/>  <!-- changed from baseline! -->
        </module>
        <module name="NPathComplexity">
            <property name="max" value="150"/>  <!-- changed from baseline! -->
        </module>
        <module name="BooleanExpressionComplexity">
            <property name="max" value="3"/>  <!-- = default -->
        </module>
        <module name="JavaNCSS">
            <property name="methodMaximum" value="40"/>  <!-- changed from baseline! -->
        </module>
    </module>
</module>
